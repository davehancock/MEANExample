var app=angular.module("social",["ngRoute"]);app.controller("ApplicationCtrl",["$scope",function(t){t.$on("login",function(o,e){t.currentUser=e})}]),angular.module("social").config(["$routeProvider","$locationProvider",function(t,o){t.when("/",{controller:"PostsCtrl",templateUrl:"./posts/posts.html"}).when("/register",{controller:"RegisterCtrl",templateUrl:"./register/register.html"}).when("/login",{controller:"LoginCtrl",templateUrl:"./login/login.html"}),o.html5Mode(!0)}]),app.controller("LoginCtrl",["$scope","UserService",function(t,o){t.login=function(e,n){o.login(e,n).then(function(o){t.$emit("login",o.data)})}}]),app.controller("PostsCtrl",["$scope","PostsService",function(t,o){o.getPosts().success(function(o){t.posts=o}),t.addPost=function(){var e={username:"foo user",body:t.postBody};t.postBody&&o.savePost(e).success(function(o){t.posts.unshift(o),t.postBody=null})}}]),app.service("PostsService",["$http",function(t){this.getPosts=function(){return t.get("/api/posts")},this.savePost=function(o){return t.post("/api/posts",o)}}]),app.controller("RegisterCtrl",["$scope",function(t){}]),app.service("UserService",["$http",function(t){var o=this;o.login=function(e,n){return t.post("/api/sessions",{username:e,password:n}).then(function(e){return o.token=e.data,t.defaults.headers.common["X-Auth"]=e.data,o.getUser()})},o.getUser=function(){return t.get("/api/users")}}]);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC5qcyIsImFwcGxpY2F0aW9uLWNvbnRyb2xsZXIuanMiLCJyb3V0ZXMuanMiLCJsb2dpbi9sb2dpbi1jb250cm9sbGVyLmpzIiwicG9zdHMvcG9zdHMtY29udHJvbGxlci5qcyIsInBvc3RzL3Bvc3RzLXNlcnZpY2UuanMiLCJyZWdpc3Rlci9yZWdpc3Rlci1jb250cm9sbGVyLmpzIiwidXNlci91c2VyLXNlcnZpY2UuanMiXSwibmFtZXMiOlsiYXBwIiwiYW5ndWxhciIsIm1vZHVsZSIsImNvbnRyb2xsZXIiLCIkc2NvcGUiLCIkb24iLCJfIiwidXNlciIsImN1cnJlbnRVc2VyIiwiY29uZmlnIiwiJHJvdXRlUHJvdmlkZXIiLCIkbG9jYXRpb25Qcm92aWRlciIsIndoZW4iLCJ0ZW1wbGF0ZVVybCIsImh0bWw1TW9kZSIsIlVzZXJTZXJ2aWNlIiwibG9naW4iLCJ1c2VybmFtZSIsInBhc3N3b3JkIiwidGhlbiIsInJlc3BvbnNlIiwiJGVtaXQiLCJkYXRhIiwiUG9zdHNTZXJ2aWNlIiwiZ2V0UG9zdHMiLCJzdWNjZXNzIiwicG9zdHMiLCJhZGRQb3N0IiwicG9zdCIsImJvZHkiLCJwb3N0Qm9keSIsInNhdmVQb3N0IiwidW5zaGlmdCIsInNlcnZpY2UiLCIkaHR0cCIsInRoaXMiLCJnZXQiLCJ2YWwiLCJ0b2tlbiIsImRlZmF1bHRzIiwiaGVhZGVycyIsImNvbW1vbiIsImdldFVzZXIiXSwibWFwcGluZ3MiOiJBQUNBLEdBQUFBLEtBQUFDLFFBQUFDLE9BQUEsVUFBQSxXQ0RBRixLQUFBRyxXQUFBLG1CQUFBLFNBQUEsU0FBQUMsR0FFQUEsRUFBQUMsSUFBQSxRQUFBLFNBQUFDLEVBQUFDLEdBQ0FILEVBQUFJLFlBQUFELE9DSEFOLFFBQUFDLE9BQUEsVUFBQU8sUUFBQSxpQkFBQSxvQkFBQSxTQUFBQyxFQUFBQyxHQUVBRCxFQUNBRSxLQUFBLEtBQ0FULFdBQUEsWUFDQVUsWUFBQSx1QkFFQUQsS0FBQSxhQUNBVCxXQUFBLGVBQ0FVLFlBQUEsNkJBRUFELEtBQUEsVUFDQVQsV0FBQSxZQUNBVSxZQUFBLHVCQUdBRixFQUFBRyxXQUFBLE1DaEJBZCxJQUFBRyxXQUFBLGFBQUEsU0FBQSxjQUFBLFNBQUFDLEVBQUFXLEdBRUFYLEVBQUFZLE1BQUEsU0FBQUMsRUFBQUMsR0FDQUgsRUFBQUMsTUFBQUMsRUFBQUMsR0FDQUMsS0FBQSxTQUFBQyxHQUNBaEIsRUFBQWlCLE1BQUEsUUFBQUQsRUFBQUUsWUNMQXRCLElBQUFHLFdBQUEsYUFBQSxTQUFBLGVBQUEsU0FBQUMsRUFBQW1CLEdBRUFBLEVBQUFDLFdBQUFDLFFBQUEsU0FBQUMsR0FDQXRCLEVBQUFzQixNQUFBQSxJQUdBdEIsRUFBQXVCLFFBQUEsV0FDQSxHQUFBQyxJQUNBWCxTQUFBLFdBQ0FZLEtBQUF6QixFQUFBMEIsU0FHQTFCLEdBQUEwQixVQUNBUCxFQUFBUSxTQUFBSCxHQUFBSCxRQUFBLFNBQUFILEdBQ0FsQixFQUFBc0IsTUFBQU0sUUFBQVYsR0FDQWxCLEVBQUEwQixTQUFBLFdDZkE5QixJQUFBaUMsUUFBQSxnQkFBQSxRQUFBLFNBQUFDLEdBRUFDLEtBQUFYLFNBQUEsV0FDQSxNQUFBVSxHQUFBRSxJQUFBLGVBR0FELEtBQUFKLFNBQUEsU0FBQUgsR0FDQSxNQUFBTSxHQUFBTixLQUFBLGFBQUFBLE9DUEE1QixJQUFBRyxXQUFBLGdCQUFBLFNBQUEsU0FBQUMsT0NBQUosSUFBQWlDLFFBQUEsZUFBQSxRQUFBLFNBQUFDLEdBRUEsR0FBQUQsR0FBQUUsSUFFQUYsR0FBQWpCLE1BQUEsU0FBQUMsRUFBQUMsR0FDQSxNQUFBZ0IsR0FBQU4sS0FBQSxpQkFDQVgsU0FBQUEsRUFDQUMsU0FBQUEsSUFDQUMsS0FBQSxTQUFBa0IsR0FHQSxNQUZBSixHQUFBSyxNQUFBRCxFQUFBZixLQUNBWSxFQUFBSyxTQUFBQyxRQUFBQyxPQUFBLFVBQUFKLEVBQUFmLEtBQ0FXLEVBQUFTLGFBSUFULEVBQUFTLFFBQUEsV0FDQSxNQUFBUixHQUFBRSxJQUFBIiwiZmlsZSI6ImFwcC5qcyIsInNvdXJjZXNDb250ZW50IjpbIlxyXG52YXIgYXBwID0gYW5ndWxhci5tb2R1bGUoJ3NvY2lhbCcsIFsnbmdSb3V0ZSddKTsiLCJhcHAuY29udHJvbGxlcignQXBwbGljYXRpb25DdHJsJywgZnVuY3Rpb24gKCRzY29wZSkge1xyXG5cclxuICAgICRzY29wZS4kb24oJ2xvZ2luJywgZnVuY3Rpb24gKF8sIHVzZXIpIHtcclxuICAgICAgICAkc2NvcGUuY3VycmVudFVzZXIgPSB1c2VyO1xyXG4gICAgfSlcclxufSk7IiwiYW5ndWxhci5tb2R1bGUoJ3NvY2lhbCcpLmNvbmZpZyhmdW5jdGlvbiAoJHJvdXRlUHJvdmlkZXIsICRsb2NhdGlvblByb3ZpZGVyKSB7XHJcblxyXG4gICAgJHJvdXRlUHJvdmlkZXJcclxuICAgICAgICAud2hlbignLycsIHtcclxuICAgICAgICAgICAgY29udHJvbGxlcjogJ1Bvc3RzQ3RybCcsXHJcbiAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnLi9wb3N0cy9wb3N0cy5odG1sJ1xyXG4gICAgICAgIH0pXHJcbiAgICAgICAgLndoZW4oJy9yZWdpc3RlcicsIHtcclxuICAgICAgICAgICAgY29udHJvbGxlcjogJ1JlZ2lzdGVyQ3RybCcsXHJcbiAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnLi9yZWdpc3Rlci9yZWdpc3Rlci5odG1sJ1xyXG4gICAgICAgIH0pXHJcbiAgICAgICAgLndoZW4oJy9sb2dpbicsIHtcclxuICAgICAgICAgICAgY29udHJvbGxlcjogJ0xvZ2luQ3RybCcsXHJcbiAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnLi9sb2dpbi9sb2dpbi5odG1sJ1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICRsb2NhdGlvblByb3ZpZGVyLmh0bWw1TW9kZSh0cnVlKTtcclxuXHJcbn0pOyIsImFwcC5jb250cm9sbGVyKCdMb2dpbkN0cmwnLCBmdW5jdGlvbiAoJHNjb3BlLCBVc2VyU2VydmljZSkge1xyXG5cclxuICAgICRzY29wZS5sb2dpbiA9IGZ1bmN0aW9uICh1c2VybmFtZSwgcGFzc3dvcmQpIHtcclxuICAgICAgICBVc2VyU2VydmljZS5sb2dpbih1c2VybmFtZSwgcGFzc3dvcmQpXHJcbiAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkge1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLiRlbWl0KCdsb2dpbicsIHJlc3BvbnNlLmRhdGEpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgIH1cclxufSk7IiwiYXBwLmNvbnRyb2xsZXIoJ1Bvc3RzQ3RybCcsIGZ1bmN0aW9uICgkc2NvcGUsIFBvc3RzU2VydmljZSkge1xyXG5cclxuICAgIFBvc3RzU2VydmljZS5nZXRQb3N0cygpLnN1Y2Nlc3MoZnVuY3Rpb24gKHBvc3RzKSB7XHJcbiAgICAgICAgJHNjb3BlLnBvc3RzID0gcG9zdHM7XHJcbiAgICB9KTtcclxuXHJcbiAgICAkc2NvcGUuYWRkUG9zdCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgcG9zdCA9IHtcclxuICAgICAgICAgICAgdXNlcm5hbWU6ICdmb28gdXNlcicsXHJcbiAgICAgICAgICAgIGJvZHk6ICRzY29wZS5wb3N0Qm9keVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKCRzY29wZS5wb3N0Qm9keSkge1xyXG4gICAgICAgICAgICBQb3N0c1NlcnZpY2Uuc2F2ZVBvc3QocG9zdCkuc3VjY2VzcyhmdW5jdGlvbiAoZGF0YSkge1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLnBvc3RzLnVuc2hpZnQoZGF0YSk7XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUucG9zdEJvZHkgPSBudWxsO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG59KTsiLCJhcHAuc2VydmljZSgnUG9zdHNTZXJ2aWNlJywgZnVuY3Rpb24gKCRodHRwKSB7XHJcblxyXG4gICAgdGhpcy5nZXRQb3N0cyA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gJGh0dHAuZ2V0KCcvYXBpL3Bvc3RzJyk7XHJcbiAgICB9XHJcblxyXG4gICAgdGhpcy5zYXZlUG9zdCA9IGZ1bmN0aW9uIChwb3N0KSB7XHJcbiAgICAgICAgcmV0dXJuICRodHRwLnBvc3QoJy9hcGkvcG9zdHMnLCBwb3N0KTtcclxuICAgIH1cclxuXHJcbn0pOyIsImFwcC5jb250cm9sbGVyKCdSZWdpc3RlckN0cmwnLCBmdW5jdGlvbiAoJHNjb3BlKSB7XHJcblxyXG5cclxuXHJcbn0pOyIsImFwcC5zZXJ2aWNlKCdVc2VyU2VydmljZScsIGZ1bmN0aW9uICgkaHR0cCkge1xyXG5cclxuICAgIHZhciBzZXJ2aWNlID0gdGhpcztcclxuXHJcbiAgICBzZXJ2aWNlLmxvZ2luID0gZnVuY3Rpb24gKHVzZXJuYW1lLCBwYXNzd29yZCkge1xyXG4gICAgICAgIHJldHVybiAkaHR0cC5wb3N0KCcvYXBpL3Nlc3Npb25zJywge1xyXG4gICAgICAgICAgICB1c2VybmFtZTogdXNlcm5hbWUsXHJcbiAgICAgICAgICAgIHBhc3N3b3JkOiBwYXNzd29yZFxyXG4gICAgICAgIH0pLnRoZW4oZnVuY3Rpb24gKHZhbCkge1xyXG4gICAgICAgICAgICBzZXJ2aWNlLnRva2VuID0gdmFsLmRhdGE7XHJcbiAgICAgICAgICAgICRodHRwLmRlZmF1bHRzLmhlYWRlcnMuY29tbW9uWydYLUF1dGgnXSA9IHZhbC5kYXRhO1xyXG4gICAgICAgICAgICByZXR1cm4gc2VydmljZS5nZXRVc2VyKCk7XHJcbiAgICAgICAgfSlcclxuICAgIH1cclxuXHJcbiAgICBzZXJ2aWNlLmdldFVzZXIgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuICRodHRwLmdldCgnL2FwaS91c2VycycpO1xyXG4gICAgfVxyXG5cclxufSk7Il0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9