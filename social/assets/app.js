var app=angular.module("social",["ngRoute","ngAnimate","ui.bootstrap"]);app.controller("ApplicationCtrl",["$scope","UserService","$modal","$log",function(t,o,e,n){var r=function(){var e=window.localStorage.getItem("token");e&&o.getUser().then(function(o){t.currentUser=o.data})};r(),t.$on("login",function(o,e){t.currentUser=e}),t.logout=function(){var r=e.open({templateUrl:"logout/logout-modal.html",controller:"LogoutModalCtrl"});r.result.then(function(e){o.logout(),t.currentUser=null},function(){n.info("modal dismissed at: "+new Date)})}}]),angular.module("social").config(["$routeProvider","$locationProvider",function(t,o){t.when("/",{controller:"PostsCtrl",templateUrl:"./posts/posts.html"}).when("/register",{controller:"RegisterCtrl",templateUrl:"./register/register.html"}).when("/login",{controller:"LoginCtrl",templateUrl:"./login/login.html"}),o.html5Mode(!0)}]),app.controller("LoginCtrl",["$scope","UserService",function(t,o){t.login=function(e,n){o.login(e,n).then(function(o){t.$emit("login",o.data)})}}]),app.controller("PostsCtrl",["$scope","PostsService",function(t,o){o.getPosts().success(function(o){t.posts=o}),t.addPost=function(){t.postBody&&o.savePost({body:t.postBody}).success(function(o){t.posts.unshift(o),t.postBody=null})}}]),app.service("PostsService",["$http",function(t){this.getPosts=function(){return t.get("/api/posts")},this.savePost=function(o){return t.post("/api/posts",o)}}]),app.controller("LogoutModalCtrl",["$scope","$modalInstance",function(t,o){t.logout=function(){o.close()},t.cancel=function(){o.dismiss("cancel")}}]),app.controller("RegisterCtrl",["$scope","UserService",function(t,o){t.createUser=function(e,n){var r={username:e,password:n};o.createUser(r).then(function(e){o.login(e.data.username,n).then(function(o){t.$emit("login",o.data)})})}}]),app.service("UserService",["$http",function(t){var o=this;o.login=function(e,n){return t.post("/api/sessions",{username:e,password:n}).then(function(t){return window.localStorage.setItem("token",t.data),o.getUser()})},o.logout=function(){t.defaults.headers.common["X-Auth"]="",window.localStorage.clear()},o.getUser=function(){return t.defaults.headers.common["X-Auth"]=window.localStorage.getItem("token"),t.get("/api/users")},o.createUser=function(o){return t.post("api/users",o)}}]);
//# sourceMappingURL=data:application/json;base64,