var app=angular.module("social",["ngRoute","ngAnimate","ui.bootstrap"]);app.controller("LoginCtrl",["$scope","UserService",function(t,o){t.login=function(e,n){o.login(e,n).then(function(o){t.$emit("login",o.data)})}}]),app.controller("LogoutModalCtrl",["$scope","$modalInstance",function(t,o){t.logout=function(){o.close()},t.cancel=function(){o.dismiss("cancel")}}]),app.controller("PostsCtrl",["$scope","PostsService",function(t,o){o.getPosts().success(function(o){t.posts=o}),t.addPost=function(){var e={username:"foo user",body:t.postBody};t.postBody&&o.savePost(e).success(function(o){t.posts.unshift(o),t.postBody=null})}}]),app.service("PostsService",["$http",function(t){this.getPosts=function(){return t.get("/api/posts")},this.savePost=function(o){return t.post("/api/posts",o)}}]),app.controller("RegisterCtrl",["$scope","UserService",function(t,o){t.createUser=function(e,n){var r={username:e,password:n};o.createUser(r).then(function(e){o.login(e.data.username,n).then(function(o){t.$emit("login",o.data)})})}}]),app.service("UserService",["$http",function(t){var o=this;o.login=function(e,n){return t.post("/api/sessions",{username:e,password:n}).then(function(e){return o.token=e.data,t.defaults.headers.common["X-Auth"]=e.data,o.getUser()})},o.logout=function(){t.defaults.headers.common["X-Auth"]=""},o.getUser=function(){return t.get("/api/users")},o.createUser=function(o){return t.post("api/users",o)}}]),app.controller("ApplicationCtrl",["$scope","UserService","$modal","$log",function(t,o,e,n){t.$on("login",function(o,e){t.currentUser=e}),t.logout=function(){var r=e.open({templateUrl:"logout/logout-modal.html",controller:"LogoutModalCtrl"});r.result.then(function(e){o.logout(),t.currentUser=null},function(){n.info("modal dismissed at: "+new Date)})}}]),angular.module("social").config(["$routeProvider","$locationProvider",function(t,o){t.when("/",{controller:"PostsCtrl",templateUrl:"./posts/posts.html"}).when("/register",{controller:"RegisterCtrl",templateUrl:"./register/register.html"}).when("/login",{controller:"LoginCtrl",templateUrl:"./login/login.html"}),o.html5Mode(!0)}]);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC5qcyIsImxvZ2luL2xvZ2luLWNvbnRyb2xsZXIuanMiLCJsb2dvdXQvbG9nb3V0LWNvbnRyb2xsZXIuanMiLCJwb3N0cy9wb3N0cy1jb250cm9sbGVyLmpzIiwicG9zdHMvcG9zdHMtc2VydmljZS5qcyIsInJlZ2lzdGVyL3JlZ2lzdGVyLWNvbnRyb2xsZXIuanMiLCJ1c2VyL3VzZXItc2VydmljZS5qcyIsImFwcGxpY2F0aW9uLWNvbnRyb2xsZXIuanMiLCJyb3V0ZXMuanMiXSwibmFtZXMiOlsiYXBwIiwiYW5ndWxhciIsIm1vZHVsZSIsImNvbnRyb2xsZXIiLCIkc2NvcGUiLCJVc2VyU2VydmljZSIsImxvZ2luIiwidXNlcm5hbWUiLCJwYXNzd29yZCIsInRoZW4iLCJyZXNwb25zZSIsIiRlbWl0IiwiZGF0YSIsIiRtb2RhbEluc3RhbmNlIiwibG9nb3V0IiwiY2xvc2UiLCJjYW5jZWwiLCJkaXNtaXNzIiwiUG9zdHNTZXJ2aWNlIiwiZ2V0UG9zdHMiLCJzdWNjZXNzIiwicG9zdHMiLCJhZGRQb3N0IiwicG9zdCIsImJvZHkiLCJwb3N0Qm9keSIsInNhdmVQb3N0IiwidW5zaGlmdCIsInNlcnZpY2UiLCIkaHR0cCIsInRoaXMiLCJnZXQiLCJjcmVhdGVVc2VyIiwidXNlciIsInZhbCIsInRva2VuIiwiZGVmYXVsdHMiLCJoZWFkZXJzIiwiY29tbW9uIiwiZ2V0VXNlciIsIiRtb2RhbCIsIiRsb2ciLCIkb24iLCJfIiwiY3VycmVudFVzZXIiLCJtb2RhbEluc3RhbmNlIiwib3BlbiIsInRlbXBsYXRlVXJsIiwicmVzdWx0IiwiZG9Mb2dvdXQiLCJpbmZvIiwiRGF0ZSIsImNvbmZpZyIsIiRyb3V0ZVByb3ZpZGVyIiwiJGxvY2F0aW9uUHJvdmlkZXIiLCJ3aGVuIiwiaHRtbDVNb2RlIl0sIm1hcHBpbmdzIjoiQUFBQSxHQUFBQSxLQUFBQyxRQUFBQyxPQUFBLFVBQUEsVUFBQSxZQUFBLGdCQ0FBRixLQUFBRyxXQUFBLGFBQUEsU0FBQSxjQUFBLFNBQUFDLEVBQUFDLEdBRUFELEVBQUFFLE1BQUEsU0FBQUMsRUFBQUMsR0FDQUgsRUFBQUMsTUFBQUMsRUFBQUMsR0FDQUMsS0FBQSxTQUFBQyxHQUNBTixFQUFBTyxNQUFBLFFBQUFELEVBQUFFLFlDTEFaLElBQUFHLFdBQUEsbUJBQUEsU0FBQSxpQkFBQSxTQUFBQyxFQUFBUyxHQUVBVCxFQUFBVSxPQUFBLFdBQ0FELEVBQUFFLFNBR0FYLEVBQUFZLE9BQUEsV0FDQUgsRUFBQUksUUFBQSxjQ1BBakIsSUFBQUcsV0FBQSxhQUFBLFNBQUEsZUFBQSxTQUFBQyxFQUFBYyxHQUVBQSxFQUFBQyxXQUFBQyxRQUFBLFNBQUFDLEdBQ0FqQixFQUFBaUIsTUFBQUEsSUFHQWpCLEVBQUFrQixRQUFBLFdBQ0EsR0FBQUMsSUFDQWhCLFNBQUEsV0FDQWlCLEtBQUFwQixFQUFBcUIsU0FHQXJCLEdBQUFxQixVQUNBUCxFQUFBUSxTQUFBSCxHQUFBSCxRQUFBLFNBQUFSLEdBQ0FSLEVBQUFpQixNQUFBTSxRQUFBZixHQUNBUixFQUFBcUIsU0FBQSxXQ2ZBekIsSUFBQTRCLFFBQUEsZ0JBQUEsUUFBQSxTQUFBQyxHQUVBQyxLQUFBWCxTQUFBLFdBQ0EsTUFBQVUsR0FBQUUsSUFBQSxlQUdBRCxLQUFBSixTQUFBLFNBQUFILEdBQ0EsTUFBQU0sR0FBQU4sS0FBQSxhQUFBQSxPQ1BBdkIsSUFBQUcsV0FBQSxnQkFBQSxTQUFBLGNBQUEsU0FBQUMsRUFBQUMsR0FFQUQsRUFBQTRCLFdBQUEsU0FBQXpCLEVBQUFDLEdBRUEsR0FBQXlCLElBQ0ExQixTQUFBQSxFQUNBQyxTQUFBQSxFQUdBSCxHQUFBMkIsV0FBQUMsR0FDQXhCLEtBQUEsU0FBQUMsR0FDQUwsRUFBQUMsTUFBQUksRUFBQUUsS0FBQUwsU0FBQUMsR0FBQUMsS0FBQSxTQUFBQyxHQUNBTixFQUFBTyxNQUFBLFFBQUFELEVBQUFFLGNDWkFaLElBQUE0QixRQUFBLGVBQUEsUUFBQSxTQUFBQyxHQUVBLEdBQUFELEdBQUFFLElBRUFGLEdBQUF0QixNQUFBLFNBQUFDLEVBQUFDLEdBQ0EsTUFBQXFCLEdBQUFOLEtBQUEsaUJBQ0FoQixTQUFBQSxFQUNBQyxTQUFBQSxJQUNBQyxLQUFBLFNBQUF5QixHQUdBLE1BRkFOLEdBQUFPLE1BQUFELEVBQUF0QixLQUNBaUIsRUFBQU8sU0FBQUMsUUFBQUMsT0FBQSxVQUFBSixFQUFBdEIsS0FDQWdCLEVBQUFXLGFBSUFYLEVBQUFkLE9BQUEsV0FDQWUsRUFBQU8sU0FBQUMsUUFBQUMsT0FBQSxVQUFBLElBR0FWLEVBQUFXLFFBQUEsV0FDQSxNQUFBVixHQUFBRSxJQUFBLGVBR0FILEVBQUFJLFdBQUEsU0FBQUMsR0FDQSxNQUFBSixHQUFBTixLQUFBLFlBQUFVLE9DeEJBakMsSUFBQUcsV0FBQSxtQkFBQSxTQUFBLGNBQUEsU0FBQSxPQUFBLFNBQUFDLEVBQUFDLEVBQUFtQyxFQUFBQyxHQUVBckMsRUFBQXNDLElBQUEsUUFBQSxTQUFBQyxFQUFBVixHQUNBN0IsRUFBQXdDLFlBQUFYLElBR0E3QixFQUFBVSxPQUFBLFdBRUEsR0FBQStCLEdBQUFMLEVBQUFNLE1BQ0FDLFlBQUEsMkJBQ0E1QyxXQUFBLG1CQUdBMEMsR0FBQUcsT0FBQXZDLEtBQUEsU0FBQXdDLEdBQ0E1QyxFQUFBUyxTQUNBVixFQUFBd0MsWUFBQSxNQUNBLFdBQ0FILEVBQUFTLEtBQUEsdUJBQUEsR0FBQUMsYUNqQkFsRCxRQUFBQyxPQUFBLFVBQUFrRCxRQUFBLGlCQUFBLG9CQUFBLFNBQUFDLEVBQUFDLEdBRUFELEVBQ0FFLEtBQUEsS0FDQXBELFdBQUEsWUFDQTRDLFlBQUEsdUJBRUFRLEtBQUEsYUFDQXBELFdBQUEsZUFDQTRDLFlBQUEsNkJBRUFRLEtBQUEsVUFDQXBELFdBQUEsWUFDQTRDLFlBQUEsdUJBR0FPLEVBQUFFLFdBQUEiLCJmaWxlIjoiYXBwLmpzIiwic291cmNlc0NvbnRlbnQiOlsidmFyIGFwcCA9IGFuZ3VsYXIubW9kdWxlKCdzb2NpYWwnLCBbJ25nUm91dGUnLCAnbmdBbmltYXRlJywgJ3VpLmJvb3RzdHJhcCddKTsiLCJhcHAuY29udHJvbGxlcignTG9naW5DdHJsJywgZnVuY3Rpb24gKCRzY29wZSwgVXNlclNlcnZpY2UpIHtcclxuXHJcbiAgICAkc2NvcGUubG9naW4gPSBmdW5jdGlvbiAodXNlcm5hbWUsIHBhc3N3b3JkKSB7XHJcbiAgICAgICAgVXNlclNlcnZpY2UubG9naW4odXNlcm5hbWUsIHBhc3N3b3JkKVxyXG4gICAgICAgICAgICAudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHtcclxuICAgICAgICAgICAgICAgICRzY29wZS4kZW1pdCgnbG9naW4nLCByZXNwb25zZS5kYXRhKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG59KTsiLCJhcHAuY29udHJvbGxlcignTG9nb3V0TW9kYWxDdHJsJywgZnVuY3Rpb24gKCRzY29wZSwgJG1vZGFsSW5zdGFuY2UpIHtcclxuXHJcbiAgICAkc2NvcGUubG9nb3V0ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICRtb2RhbEluc3RhbmNlLmNsb3NlKCk7XHJcbiAgICB9O1xyXG5cclxuICAgICRzY29wZS5jYW5jZWwgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgJG1vZGFsSW5zdGFuY2UuZGlzbWlzcygnY2FuY2VsJyk7XHJcbiAgICB9O1xyXG5cclxufSk7IiwiYXBwLmNvbnRyb2xsZXIoJ1Bvc3RzQ3RybCcsIGZ1bmN0aW9uICgkc2NvcGUsIFBvc3RzU2VydmljZSkge1xyXG5cclxuICAgIFBvc3RzU2VydmljZS5nZXRQb3N0cygpLnN1Y2Nlc3MoZnVuY3Rpb24gKHBvc3RzKSB7XHJcbiAgICAgICAgJHNjb3BlLnBvc3RzID0gcG9zdHM7XHJcbiAgICB9KTtcclxuXHJcbiAgICAkc2NvcGUuYWRkUG9zdCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgcG9zdCA9IHtcclxuICAgICAgICAgICAgdXNlcm5hbWU6ICdmb28gdXNlcicsXHJcbiAgICAgICAgICAgIGJvZHk6ICRzY29wZS5wb3N0Qm9keVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKCRzY29wZS5wb3N0Qm9keSkge1xyXG4gICAgICAgICAgICBQb3N0c1NlcnZpY2Uuc2F2ZVBvc3QocG9zdCkuc3VjY2VzcyhmdW5jdGlvbiAoZGF0YSkge1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLnBvc3RzLnVuc2hpZnQoZGF0YSk7XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUucG9zdEJvZHkgPSBudWxsO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG59KTsiLCJhcHAuc2VydmljZSgnUG9zdHNTZXJ2aWNlJywgZnVuY3Rpb24gKCRodHRwKSB7XHJcblxyXG4gICAgdGhpcy5nZXRQb3N0cyA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gJGh0dHAuZ2V0KCcvYXBpL3Bvc3RzJyk7XHJcbiAgICB9XHJcblxyXG4gICAgdGhpcy5zYXZlUG9zdCA9IGZ1bmN0aW9uIChwb3N0KSB7XHJcbiAgICAgICAgcmV0dXJuICRodHRwLnBvc3QoJy9hcGkvcG9zdHMnLCBwb3N0KTtcclxuICAgIH1cclxuXHJcbn0pOyIsImFwcC5jb250cm9sbGVyKCdSZWdpc3RlckN0cmwnLCBmdW5jdGlvbiAoJHNjb3BlLCBVc2VyU2VydmljZSkge1xyXG5cclxuICAgICRzY29wZS5jcmVhdGVVc2VyID0gZnVuY3Rpb24gKHVzZXJuYW1lLCBwYXNzd29yZCkge1xyXG5cclxuICAgICAgICB2YXIgdXNlciA9IHtcclxuICAgICAgICAgICAgdXNlcm5hbWU6IHVzZXJuYW1lLFxyXG4gICAgICAgICAgICBwYXNzd29yZDogcGFzc3dvcmRcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIFVzZXJTZXJ2aWNlLmNyZWF0ZVVzZXIodXNlcilcclxuICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgICAgICBVc2VyU2VydmljZS5sb2dpbihyZXNwb25zZS5kYXRhLnVzZXJuYW1lLCBwYXNzd29yZCkudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuJGVtaXQoJ2xvZ2luJywgcmVzcG9uc2UuZGF0YSk7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG59KTsiLCJhcHAuc2VydmljZSgnVXNlclNlcnZpY2UnLCBmdW5jdGlvbiAoJGh0dHApIHtcclxuXHJcbiAgICB2YXIgc2VydmljZSA9IHRoaXM7XHJcblxyXG4gICAgc2VydmljZS5sb2dpbiA9IGZ1bmN0aW9uICh1c2VybmFtZSwgcGFzc3dvcmQpIHtcclxuICAgICAgICByZXR1cm4gJGh0dHAucG9zdCgnL2FwaS9zZXNzaW9ucycsIHtcclxuICAgICAgICAgICAgdXNlcm5hbWU6IHVzZXJuYW1lLFxyXG4gICAgICAgICAgICBwYXNzd29yZDogcGFzc3dvcmRcclxuICAgICAgICB9KS50aGVuKGZ1bmN0aW9uICh2YWwpIHtcclxuICAgICAgICAgICAgc2VydmljZS50b2tlbiA9IHZhbC5kYXRhO1xyXG4gICAgICAgICAgICAkaHR0cC5kZWZhdWx0cy5oZWFkZXJzLmNvbW1vblsnWC1BdXRoJ10gPSB2YWwuZGF0YTtcclxuICAgICAgICAgICAgcmV0dXJuIHNlcnZpY2UuZ2V0VXNlcigpO1xyXG4gICAgICAgIH0pXHJcbiAgICB9XHJcblxyXG4gICAgc2VydmljZS5sb2dvdXQgPSBmdW5jdGlvbigpe1xyXG4gICAgICAgICRodHRwLmRlZmF1bHRzLmhlYWRlcnMuY29tbW9uWydYLUF1dGgnXSA9IFwiXCI7XHJcbiAgICB9XHJcblxyXG4gICAgc2VydmljZS5nZXRVc2VyID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiAkaHR0cC5nZXQoJy9hcGkvdXNlcnMnKTtcclxuICAgIH1cclxuXHJcbiAgICBzZXJ2aWNlLmNyZWF0ZVVzZXIgPSBmdW5jdGlvbiAodXNlcikge1xyXG4gICAgICAgIHJldHVybiAkaHR0cC5wb3N0KCdhcGkvdXNlcnMnLCB1c2VyKTtcclxuICAgIH1cclxuXHJcbn0pOyIsImFwcC5jb250cm9sbGVyKCdBcHBsaWNhdGlvbkN0cmwnLCBmdW5jdGlvbiAoJHNjb3BlLCBVc2VyU2VydmljZSwgJG1vZGFsLCAkbG9nKSB7XHJcblxyXG4gICAgJHNjb3BlLiRvbignbG9naW4nLCBmdW5jdGlvbiAoXywgdXNlcikge1xyXG4gICAgICAgICRzY29wZS5jdXJyZW50VXNlciA9IHVzZXI7XHJcbiAgICB9KVxyXG5cclxuICAgICRzY29wZS5sb2dvdXQgPSBmdW5jdGlvbiAoKSB7XHJcblxyXG4gICAgICAgIHZhciBtb2RhbEluc3RhbmNlID0gJG1vZGFsLm9wZW4oe1xyXG4gICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ2xvZ291dC9sb2dvdXQtbW9kYWwuaHRtbCcsXHJcbiAgICAgICAgICAgIGNvbnRyb2xsZXI6ICdMb2dvdXRNb2RhbEN0cmwnLFxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICBtb2RhbEluc3RhbmNlLnJlc3VsdC50aGVuKGZ1bmN0aW9uIChkb0xvZ291dCkge1xyXG4gICAgICAgICAgICBVc2VyU2VydmljZS5sb2dvdXQoKTtcclxuICAgICAgICAgICAgJHNjb3BlLmN1cnJlbnRVc2VyID0gbnVsbDtcclxuICAgICAgICB9LCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICRsb2cuaW5mbygnbW9kYWwgZGlzbWlzc2VkIGF0OiAnICsgbmV3IERhdGUoKSk7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgfTtcclxuXHJcbn0pO1xyXG5cclxuXHJcblxyXG4iLCJhbmd1bGFyLm1vZHVsZSgnc29jaWFsJykuY29uZmlnKGZ1bmN0aW9uICgkcm91dGVQcm92aWRlciwgJGxvY2F0aW9uUHJvdmlkZXIpIHtcclxuXHJcbiAgICAkcm91dGVQcm92aWRlclxyXG4gICAgICAgIC53aGVuKCcvJywge1xyXG4gICAgICAgICAgICBjb250cm9sbGVyOiAnUG9zdHNDdHJsJyxcclxuICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICcuL3Bvc3RzL3Bvc3RzLmh0bWwnXHJcbiAgICAgICAgfSlcclxuICAgICAgICAud2hlbignL3JlZ2lzdGVyJywge1xyXG4gICAgICAgICAgICBjb250cm9sbGVyOiAnUmVnaXN0ZXJDdHJsJyxcclxuICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICcuL3JlZ2lzdGVyL3JlZ2lzdGVyLmh0bWwnXHJcbiAgICAgICAgfSlcclxuICAgICAgICAud2hlbignL2xvZ2luJywge1xyXG4gICAgICAgICAgICBjb250cm9sbGVyOiAnTG9naW5DdHJsJyxcclxuICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICcuL2xvZ2luL2xvZ2luLmh0bWwnXHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgJGxvY2F0aW9uUHJvdmlkZXIuaHRtbDVNb2RlKHRydWUpO1xyXG5cclxufSk7Il0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9